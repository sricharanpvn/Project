1. Introduction of the application
2. Install Development Tools
3. Create an Angular application
4. Added Header 
    i. Components 
    ii. Add Html
    iii. Add CSS
5. Add the Food List
    i. Create a Food Model
    ii. Create data
    iii. Add Images to the assets
    iv. Create Food Service
    v. Create Component - Home Component
        - Html
        - CSS
        - Typescript
6. Search Component
   i. Adding a method to the Food Service -displaying food items related to searchquary
   ii. Adding the Search Route
   iii. Showing Search Result in the Home Component
   iv. Generating the Search Component
        *Adding it to thr home(re-using)
        *Adding Typescript
        *Adding Html
        *Adding CSS
7. Food Page
    i. Adding a method in a service 
    ii. Generating a Component(food-detail)
        *Adding Route
        *Adding TS 
        *Adding Html
        *Adding CSS
8. Card Page
    i.Cart Item Model
    ii.Cart Model
    iii. Cart Service
    iv. Add to Cart Buttton Validation
    v. Cart Page Component
        *Adding Route
        *Adding TS 
        *Adding Html
        *Adding CSS
9. Food not found!
    i. Generate Component - not found
        *Adding TS 
        *Adding Html
        *Adding CSS
    ii. Adding the Component to Pages
        *Home Page
        *Food Page
        *Cart Page
10. Creating Backend -server 

11. Login Page:
    1. Generating Component 
        *Adding Routes
        *Adding TS 
        *Adding Html
        *Adding CSS
    2. Importing Reactive Forms Module
    3. Adding CSS
    4. Adding Login API
        * Using JSON
        * Adding JWT (JSON Web Token) Service
        * Testing the Token using POSTMAN
        
12. Generate User Service
    1. Generate User Model
    2. Add the User Subject
    3. Add Login Method
        1. Add user URL's
        2. Generate User Login Interface
        3. Add ngx-toastr
            1. Import Module
            2. Import Browser Animations Module
            3. Add styles in angular.json 
        4. Add Login to Header
    4. Add Local Storage methods
    5. Add Logout Method
        1. Add Logout to Header

13. Connect Login API to MongoDB Atlas
    1. Moving APIs into routers
    2. Create MongoDB Atlas
    3. Create .env file
    4. Install
        1. mongoose
        2. dotenv
        3. bcryptjs
        4. jsonwebtoken
        5. expess-asyns-handler
        $ npm install mongoose dotenv bcryptjs express-async-handler --save
    5. Connect to MongoDB Atlas
    6. Use MongoDB instead of data.ts in APIs

